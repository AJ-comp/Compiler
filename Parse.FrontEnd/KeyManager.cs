using Parse.FrontEnd.RegularGrammar;
using System;
using System.Collections.Generic;
using System.Linq;

namespace Parse.FrontEnd
{
    public class KeyManager
    {
        private Dictionary<uint, string> terminalKeyDic = new Dictionary<uint, string>();
        private Dictionary<uint, string> nonTerminalKeyDic = new Dictionary<uint, string>();
        private Dictionary<uint, string> meaningUnitKeyDic = new Dictionary<uint, string>();

        private uint terminalKey = 1000000;                   // 1000000 ~ 1999999
        private uint nonTerminalKey = 2000000;            // 2000000 ~ 2999999
        private uint autogeneratedNTKey = 3000000;    // 3000000 ~ 3999999
        private uint meaningUnitKey = 9000000;

        public static uint EndMarkerKey { get; } = 1;
        public static uint EpsilonKey { get; } = 2;
        public static uint NotDefinedKey { get; } = 3;
        public static uint CustomTerminalKey { get; } = 4;


        public void AllocateUniqueKey(Terminal item)
        {
            if (this.terminalKeyDic.ContainsValue(item.Value))
                item.UniqueKey = this.terminalKeyDic.FirstOrDefault(x => x.Value == item.Value).Key;
            else
            {
                this.terminalKeyDic.Add(terminalKey, item.Value);
                item.UniqueKey = terminalKey++;
            }
        }

        public void AllocateUniqueKey(NonTerminal item)
        {
            if (this.nonTerminalKeyDic.ContainsValue(item.Name))
                item.UniqueKey = this.nonTerminalKeyDic.FirstOrDefault(x => x.Value == item.Name).Key;
            else
            {
                if(item.AutoGenerated)
                {
                    this.nonTerminalKeyDic.Add(this.autogeneratedNTKey, item.Name);
                    item.UniqueKey = this.autogeneratedNTKey++;
                }
                else
                {
                    this.nonTerminalKeyDic.Add(this.nonTerminalKey, item.Name);
                    item.UniqueKey = this.nonTerminalKey++;
                }
            }
        }

        public void AllocateUniqueKey(MeaningUnit item)
        {
            /*
            if (this.meaningUnitKeyDic.ContainsValue(item.Name))
                item.uniqueKey = this.meaningUnitKeyDic.FirstOrDefault(x => x.Value == item.Name).Key;
            else
            {
                this.meaningUnitKeyDic.Add(this.meaningUnitKey, item.Name);
                item.uniqueKey = this.meaningUnitKey++;
            }
            */
        }

        public void Remove(NonTerminal nonTerminal)
        {
            var key = this.nonTerminalKeyDic.FirstOrDefault(x => x.Value == nonTerminal.Name).Key;
            this.nonTerminalKeyDic.Remove(key);
        }
    }
}
