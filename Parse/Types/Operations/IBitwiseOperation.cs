using Parse.Types.ConstantTypes;

namespace Parse.Types.Operations
{
    public interface IBitwiseOperation : IOperation
    {
        ///////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// This function means this & operand.
        /// </summary>
        /// <param name="operand"></param>
        /// <returns></returns>
        ///////////////////////////////////////////////////////////////////////////////////////
        IConstant BitAnd(IValue operand);

        ///////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// This function means this | operand2.
        /// </summary>
        /// <param name="operand"></param>
        /// <returns></returns>
        ///////////////////////////////////////////////////////////////////////////////////////
        IConstant BitOr(IValue operand);

        ///////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// This function means ~this
        /// </summary>
        /// <returns></returns>
        ///////////////////////////////////////////////////////////////////////////////////////
        IConstant BitNot();

        ///////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// This function means this ^ operand
        /// </summary>
        /// <param name="operand"></param>
        /// <returns></returns>
        ///////////////////////////////////////////////////////////////////////////////////////
        IConstant BitXor(IValue operand);

        ///////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// This function means this << count
        /// </summary>
        /// <param name="count"></param>
        /// <returns></returns>
        ///////////////////////////////////////////////////////////////////////////////////////
        IConstant LeftShift(int count);

        ///////////////////////////////////////////////////////////////////////////////////////
        /// <summary>
        /// This function means this >> count
        /// </summary>
        /// <param name="count"></param>
        /// <returns></returns>
        ///////////////////////////////////////////////////////////////////////////////////////
        IConstant RightShift(int count);
    }
}
