<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="CreateSolution" xml:space="preserve">
    <value>Create solution</value>
  </data>
  <data name="Version" xml:space="preserve">
    <value>Show version information</value>
  </data>
  <data name="Sln" xml:space="preserve">
    <value>List or modify projects of solution file</value>
  </data>
  <data name="ListProject" xml:space="preserve">
    <value>List all project of solution file</value>
  </data>
  <data name="AddProject" xml:space="preserve">
    <value>Add the project to solution file</value>
  </data>
  <data name="RemoveProject" xml:space="preserve">
    <value>Remove the project from solution file</value>
  </data>
  <data name="NewCommand" xml:space="preserve">
    <value>Create a new project, the configure file or solution from the specified template</value>
  </data>
  <data name="Output" xml:space="preserve">
    <value>The position to deploy the generated output, basis value is current directory</value>
  </data>
  <data name="AJBuild" xml:space="preserve">
    <value>The program to construct the build solution</value>
  </data>
  <data name="Template" xml:space="preserve">
    <value>The template to instantiate when the command is invoked. Each template might have specific options you can pass. For more information, see Template options. You can run ajbuild new --list to see a list of all installed templates.</value>
  </data>
  <data name="ListTemplate" xml:space="preserve">
    <value>List a template included specified template name. if the name is not specified list all templates.</value>
  </data>
  <data name="CreateStartProject" xml:space="preserve">
    <value>Create a start project.</value>
  </data>
  <data name="CreateLibraryProject" xml:space="preserve">
    <value>Create a library project.</value>
  </data>
  <data name="CreateSolutionSuccess" xml:space="preserve">
    <value>Solution file was created.</value>
  </data>
  <data name="Path" xml:space="preserve">
    <value>The path: </value>
  </data>
  <data name="CreateProjectSuccess" xml:space="preserve">
    <value>Project file was created.</value>
  </data>
  <data name="ErrorReadSolution" xml:space="preserve">
    <value>There is no solution file in the specified path or there are the solution files 2 more than.</value>
  </data>
  <data name="AddProjectSuccess" xml:space="preserve">
    <value>The project was added to solution.</value>
  </data>
  <data name="ErrorReadProject" xml:space="preserve">
    <value>There is no project file in the specified path or there are the project files 2 more than.</value>
  </data>
  <data name="RemoveProjectSuccess" xml:space="preserve">
    <value>The project was removed from the solution.</value>
  </data>
  <data name="BuildTarget" xml:space="preserve">
    <value>The project file or solution file to build. If the project file or solution file is not specified search the project file or solution file in the current direcotry and if found use it.</value>
  </data>
  <data name="ArchOption" xml:space="preserve">
    <value>Specify target architecture. you can see the supported architecture type through the command ajbuild arch --list.</value>
  </data>
  <data name="ListArch" xml:space="preserve">
    <value>List the supported architecture list.</value>
  </data>
  <data name="ArmArch" xml:space="preserve">
    <value>Specify ARM architecture.</value>
  </data>
  <data name="AvrArch" xml:space="preserve">
    <value>Specify AVR architecture.</value>
  </data>
  <data name="Arch" xml:space="preserve">
    <value>Show detail contents related to the target architecture.</value>
  </data>
  <data name="Build" xml:space="preserve">
    <value>Bulld the project and dependency to binary file.</value>
  </data>
  <data name="BuildConfig" xml:space="preserve">
    <value>Define build configuration. The basic value is the debug, the supported build configuration is the debug, release.</value>
  </data>
  <data name="OutputFormat" xml:space="preserve">
    <value>Specify the display format.</value>
  </data>
</root>