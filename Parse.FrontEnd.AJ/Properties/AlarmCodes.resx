<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
		Microsoft ResX Schema

		Version 1.3

		The primary goals of this format is to allow a simple XML format 
		that is mostly human readable. The generation and parsing of the 
		various data types are done through the TypeConverter classes 
		associated with the data types.

		Example:

		... ado.net/XML headers & schema ...
		<resheader name="resmimetype">text/microsoft-resx</resheader>
		<resheader name="version">1.3</resheader>
		<resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
		<resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
		<data name="Name1">this is my long string</data>
		<data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
		<data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
			[base64 mime encoded serialized .NET Framework object]
		</data>
		<data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
			[base64 mime encoded string representing a byte array form of the .NET Framework object]
		</data>

		There are any number of "resheader" rows that contain simple 
		name/value pairs.

		Each data row contains a name, and value. The row also contains a 
		type or mimetype. Type corresponds to a .NET class that support 
		text/value conversion through the TypeConverter architecture. 
		Classes that don't support this are serialized and stored with the 
		mimetype set.

		The mimetype is used for serialized objects, and tells the 
		ResXResourceReader how to depersist the object. This is currently not 
		extensible. For a given mimetype the value must be set accordingly:

		Note - application/x-microsoft.net.object.binary.base64 is the format 
		that the ResXResourceWriter will generate, however the reader can 
		read any of the formats listed below.

		mimetype: application/x-microsoft.net.object.binary.base64
		value   : The object must be serialized with 
			: System.Serialization.Formatters.Binary.BinaryFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.soap.base64
		value   : The object must be serialized with 
			: System.Runtime.Serialization.Formatters.Soap.SoapFormatter
			: and then encoded with base64 encoding.

		mimetype: application/x-microsoft.net.object.bytearray.base64
		value   : The object must be serialized into a byte array 
			: using a System.ComponentModel.TypeConverter
			: and then encoded with base64 encoding.
	-->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>1.3</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.3500.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="MCL0000" xml:space="preserve">
    <value>{0} is already defined.</value>
  </data>
  <data name="MCL0001" xml:space="preserve">
    <value>{0} is not defined.</value>
  </data>
  <data name="MCL0002" xml:space="preserve">
    <value>Value can not be changed because {0} is the constant type.</value>
  </data>
  <data name="MCL0003" xml:space="preserve">
    <value>It can not be allocated because the data type differs.</value>
  </data>
  <data name="MCL0004" xml:space="preserve">
    <value>lvalue have to be modifiable format.</value>
  </data>
  <data name="MCL0005" xml:space="preserve">
    <value>{0} variable that not initialized is using.</value>
  </data>
  <data name="MCL0006" xml:space="preserve">
    <value>Integer or enum type has to be to expression.</value>
  </data>
  <data name="MCL0007" xml:space="preserve">
    <value>Buffer overflow fired while write {0}. writable byte is {1} but in fact write {2} byte.</value>
  </data>
  <data name="MCL0008" xml:space="preserve">
    <value>The operand of Inc or Dec operator has to be variable, property or indexer.</value>
  </data>
  <data name="MCL0009" xml:space="preserve">
    <value>The {0} identifier was already defined in the current block.</value>
  </data>
  <data name="MCL0010" xml:space="preserve">
    <value>It was failed to struct Sdts nodes.</value>
  </data>
  <data name="MCL0011" xml:space="preserve">
    <value>The calculation '{0}' is not applicated for the operand '{1}' and '{2}.</value>
  </data>
  <data name="MCL0012" xml:space="preserve">
    <value>The operand of the inc or dec has to be variable, property or indexer.</value>
  </data>
  <data name="MCL0013" xml:space="preserve">
    <value>The operator '{0}' is not applicated to {1} type operand.</value>
  </data>
  <data name="MCL0014" xml:space="preserve">
    <value>The member '{0}' is not used as method.</value>
  </data>
  <data name="MCL0015" xml:space="preserve">
    <value>There is not overload method '{1}' that use parameter {0} count.</value>
  </data>
  <data name="MCL0016" xml:space="preserve">
    <value>There is not argument for parameter '{1}' that need in the '{0}' method.</value>
  </data>
  <data name="MCL0017" xml:space="preserve">
    <value>It can't be declared using identifier that defined in macro.</value>
  </data>
  <data name="MCL0018" xml:space="preserve">
    <value>The macro can't be included own identifier.</value>
  </data>
  <data name="MCL0019" xml:space="preserve">
    <value>The reverse reference can be used only if type is address type.</value>
  </data>
  <data name="MCL0020" xml:space="preserve">
    <value>The '{0}' type can't be used for variable type.</value>
  </data>
  <data name="MCL0021" xml:space="preserve">
    <value>The '{1}' definition is included in the '{0}' namespace.</value>
  </data>
  <data name="MCL0022" xml:space="preserve">
    <value>'!' operator can be applied to only 'bool' type operand.</value>
  </data>
  <data name="MCL0023" xml:space="preserve">
    <value>'{0}' operator can't be applied to '{1}' and '{2}' type operand.</value>
  </data>
  <data name="MCL0024" xml:space="preserve">
    <value>The type '{0}' and '{1}' can't be compared.</value>
  </data>
  <data name="MCL0025" xml:space="preserve">
    <value>It can't convert from {0} type to {1} type implicitly.</value>
  </data>
  <data name="AJ0026" xml:space="preserve">
    <value>The '{1}' definition is included in the '{0}' type.</value>
  </data>
  <data name="AJ0027" xml:space="preserve">
    <value>The member name can't same with the outer name.</value>
  </data>
  <data name="AJ0028" xml:space="preserve">
    <value>It can't be come the expression because the return type of function is void.</value>
  </data>
  <data name="AJ0029" xml:space="preserve">
    <value>It must be come the expression because the return type of function is not void.</value>
  </data>
  <data name="AJ0030" xml:space="preserve">
    <value>{0} type can't convert to {1} type. please return type of function.</value>
  </data>
  <data name="AJ0031" xml:space="preserve">
    <value>Can't find {0} type or the namespace name. Check if there is the using directive or assembly reference.</value>
  </data>
  <data name="AJ0032" xml:space="preserve">
    <value>The {1} type is already delcared in the {0} namespace.</value>
  </data>
  <data name="AJ0033" xml:space="preserve">
    <value>There is an empty sentence. Is your intention correct?</value>
  </data>
</root>